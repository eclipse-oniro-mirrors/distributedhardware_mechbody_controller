# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//build/test.gni")

mechbody_module_output_path =
    "mechbody_controller/mechbody_controller/mechbodyservicetest"

mechbody_path =
    "//foundation/distributedhardware/mechbody_controller"

config("mech_test_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "${mechbody_path}/services/include",
    "${mechbody_path}/services/src",
    "${mechbody_path}/services/include/connect",
    "${mechbody_path}/services/include/controller",
    "${mechbody_path}/services/include/motion",
    "${mechbody_path}/services/include/transport",
    "${mechbody_path}/services/include/transport/command",
    "${mechbody_path}/interface/inner_api",
  ]
}

mech_external_deps = [
  "ability_base:base",
  "access_token:libaccesstoken_sdk",
  "access_token:libtokensetproc_shared",
  "bluetooth:btcommon",
  "bluetooth:btframework",
  "cJSON:cjson",
  "c_utils:utils",
  "camera_framework:camera_framework",
  "eventhandler:libeventhandler",
  "graphic_surface:surface",
  "hilog:libhilog",
  "init:libbegetutil",
  "input:libmmi-client",
  "input:oh_input_manager",
  "ipc:ipc_core",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
  "sensor:sensor_interface_native",
]

mech_public_deps = [ "${mechbody_path}/services:mechbody_service" ]

ohos_unittest("mc_montion_manager_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "motion/mc_motion_manager_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mc_transport_command_test") {
  cflags = [ "-Dprivate=public" ]
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "transport/mc_data_buffer_test.cpp",
    "transport/mc_protocol_convertor_test.cpp",
  ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("ble_send_manager_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "ble_send_manager_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("connect_manager_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "connect_manager/bluetooth_state_test.cpp",
    "connect_manager/connect_manager_test.cpp",
  ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mc_send_manager_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "mc_send_manager/mc_send_manager_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mc_subcription_center_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "mc_subcription_center/mc_subcription_center_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mc_command_test") {
  cflags = [ "-Dprivate=public" ]
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "transport/command/mc_command_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mechbody_controller_stub_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "mechbody_controller_stub_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mechbody_controller_service_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "mechbody_controller_service_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

ohos_unittest("mc_camera_tracking_controller_test") {
  visibility = [ ":*" ]

  module_out_path = mechbody_module_output_path

  cflags = [ "-Dprivate=public" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "controller/mc_camera_tracking_controller_test.cpp" ]

  configs = [
    ":mech_test_config",
    "${mechbody_path}/test/resource:coverage_flags",
  ]

  external_deps = mech_external_deps
  public_deps = mech_public_deps

  part_name = "mechbody_controller"
  subsystem_name = "distributedhardware"
}

group("unittest") {
  testonly = true
  deps = [
    ":ble_send_manager_test",
    ":connect_manager_test",
    ":mc_camera_tracking_controller_test",
    ":mc_command_test",
    ":mc_montion_manager_test",
    ":mc_send_manager_test",
    ":mc_subcription_center_test",
    ":mc_transport_command_test",
    ":mechbody_controller_service_test",
    ":mechbody_controller_stub_test",
  ]
}
